<?php
/**
 * ExportFormat
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Integrations\Canva\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Canva Connect API
 *
 * API for building integrations with Canva via a REST api
 *
 * The version of the OpenAPI document: latest
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Integrations\Canva\SDK\Model;

use \ArrayAccess;
use \Integrations\Canva\SDK\ObjectSerializer;

/**
 * ExportFormat Class Doc Comment
 *
 * @category Class
 * @description Details about the desired export format.
 * @package  Integrations\Canva\SDK
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ExportFormat implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = 'type';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExportFormat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'export_quality' => '\Integrations\Canva\SDK\Model\ExportQuality',
        'size' => '\Integrations\Canva\SDK\Model\ExportPageSize',
        'pages' => 'int[]',
        'quality' => 'string',
        'height' => 'int',
        'width' => 'int',
        'lossless' => 'bool',
        'as_single_image' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'export_quality' => null,
        'size' => null,
        'pages' => null,
        'quality' => null,
        'height' => 'int32',
        'width' => 'int32',
        'lossless' => null,
        'as_single_image' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'export_quality' => false,
        'size' => false,
        'pages' => false,
        'quality' => false,
        'height' => false,
        'width' => false,
        'lossless' => false,
        'as_single_image' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'export_quality' => 'export_quality',
        'size' => 'size',
        'pages' => 'pages',
        'quality' => 'quality',
        'height' => 'height',
        'width' => 'width',
        'lossless' => 'lossless',
        'as_single_image' => 'as_single_image'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'export_quality' => 'setExportQuality',
        'size' => 'setSize',
        'pages' => 'setPages',
        'quality' => 'setQuality',
        'height' => 'setHeight',
        'width' => 'setWidth',
        'lossless' => 'setLossless',
        'as_single_image' => 'setAsSingleImage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'export_quality' => 'getExportQuality',
        'size' => 'getSize',
        'pages' => 'getPages',
        'quality' => 'getQuality',
        'height' => 'getHeight',
        'width' => 'getWidth',
        'lossless' => 'getLossless',
        'as_single_image' => 'getAsSingleImage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_PDF = 'pdf';
    public const TYPE_JPG = 'jpg';
    public const TYPE_PNG = 'png';
    public const TYPE_PPTX = 'pptx';
    public const TYPE_GIF = 'gif';
    public const TYPE_MP4 = 'mp4';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PDF,
            self::TYPE_JPG,
            self::TYPE_PNG,
            self::TYPE_PPTX,
            self::TYPE_GIF,
            self::TYPE_MP4,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('export_quality', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('pages', $data ?? [], null);
        $this->setIfExists('quality', $data ?? [], null);
        $this->setIfExists('height', $data ?? [], null);
        $this->setIfExists('width', $data ?? [], null);
        $this->setIfExists('lossless', $data ?? [], false);
        $this->setIfExists('as_single_image', $data ?? [], false);

        // Initialize discriminator property with the model name.
        $this->container['type'] = static::$openAPIModelName;
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['quality'] === null) {
            $invalidProperties[] = "'quality' can't be null";
        }
        if (!is_null($this->container['height']) && ($this->container['height'] > 25000)) {
            $invalidProperties[] = "invalid value for 'height', must be smaller than or equal to 25000.";
        }

        if (!is_null($this->container['height']) && ($this->container['height'] < 40)) {
            $invalidProperties[] = "invalid value for 'height', must be bigger than or equal to 40.";
        }

        if (!is_null($this->container['width']) && ($this->container['width'] > 25000)) {
            $invalidProperties[] = "invalid value for 'width', must be smaller than or equal to 25000.";
        }

        if (!is_null($this->container['width']) && ($this->container['width'] < 40)) {
            $invalidProperties[] = "invalid value for 'width', must be bigger than or equal to 40.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets export_quality
     *
     * @return \Integrations\Canva\SDK\Model\ExportQuality|null
     */
    public function getExportQuality()
    {
        return $this->container['export_quality'];
    }

    /**
     * Sets export_quality
     *
     * @param \Integrations\Canva\SDK\Model\ExportQuality|null $export_quality export_quality
     *
     * @return self
     */
    public function setExportQuality($export_quality)
    {
        if (is_null($export_quality)) {
            throw new \InvalidArgumentException('non-nullable export_quality cannot be null');
        }
        $this->container['export_quality'] = $export_quality;

        return $this;
    }

    /**
     * Gets size
     *
     * @return \Integrations\Canva\SDK\Model\ExportPageSize|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param \Integrations\Canva\SDK\Model\ExportPageSize|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets pages
     *
     * @return int[]|null
     */
    public function getPages()
    {
        return $this->container['pages'];
    }

    /**
     * Sets pages
     *
     * @param int[]|null $pages To specify which pages to export in a multi-page design, provide the page numbers as an array. The first page in a design is page `1`. If `pages` isn't specified, all the pages are exported.
     *
     * @return self
     */
    public function setPages($pages)
    {
        if (is_null($pages)) {
            throw new \InvalidArgumentException('non-nullable pages cannot be null');
        }
        $this->container['pages'] = $pages;

        return $this;
    }

    /**
     * Gets quality
     *
     * @return string
     */
    public function getQuality()
    {
        return $this->container['quality'];
    }

    /**
     * Sets quality
     *
     * @param string $quality quality
     *
     * @return self
     */
    public function setQuality($quality)
    {
        if (is_null($quality)) {
            throw new \InvalidArgumentException('non-nullable quality cannot be null');
        }
        $this->container['quality'] = $quality;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int|null
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int|null $height Specify the height in pixels of the exported image. If only one of height or width is specified, then the image will be scaled to match that dimension, respecting the design's aspect ratio. If no width or height is specified, the image will be exported using the dimensions of the design.
     *
     * @return self
     */
    public function setHeight($height)
    {
        if (is_null($height)) {
            throw new \InvalidArgumentException('non-nullable height cannot be null');
        }

        if (($height > 25000)) {
            throw new \InvalidArgumentException('invalid value for $height when calling ExportFormat., must be smaller than or equal to 25000.');
        }
        if (($height < 40)) {
            throw new \InvalidArgumentException('invalid value for $height when calling ExportFormat., must be bigger than or equal to 40.');
        }

        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int|null
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int|null $width Specify the width in pixels of the exported image. If only one of height or width is specified, then the image will be scaled to match that dimension, respecting the design's aspect ratio. If no width or height is specified, the image will be exported using the dimensions of the design.
     *
     * @return self
     */
    public function setWidth($width)
    {
        if (is_null($width)) {
            throw new \InvalidArgumentException('non-nullable width cannot be null');
        }

        if (($width > 25000)) {
            throw new \InvalidArgumentException('invalid value for $width when calling ExportFormat., must be smaller than or equal to 25000.');
        }
        if (($width < 40)) {
            throw new \InvalidArgumentException('invalid value for $width when calling ExportFormat., must be bigger than or equal to 40.');
        }

        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets lossless
     *
     * @return bool|null
     */
    public function getLossless()
    {
        return $this->container['lossless'];
    }

    /**
     * Sets lossless
     *
     * @param bool|null $lossless When `true`, the PNG is compressed with a lossless compression algorithm (`false` by default).
     *
     * @return self
     */
    public function setLossless($lossless)
    {
        if (is_null($lossless)) {
            throw new \InvalidArgumentException('non-nullable lossless cannot be null');
        }
        $this->container['lossless'] = $lossless;

        return $this;
    }

    /**
     * Gets as_single_image
     *
     * @return bool|null
     */
    public function getAsSingleImage()
    {
        return $this->container['as_single_image'];
    }

    /**
     * Sets as_single_image
     *
     * @param bool|null $as_single_image When `true`, multi-page designs are merged into a single image. When `false` (default), each page is exported as a separate image.
     *
     * @return self
     */
    public function setAsSingleImage($as_single_image)
    {
        if (is_null($as_single_image)) {
            throw new \InvalidArgumentException('non-nullable as_single_image cannot be null');
        }
        $this->container['as_single_image'] = $as_single_image;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


